-- =========================================================
-- Extensions
-- =========================================================
create extension if not exists moddatetime schema extensions;

-- =========================================================
-- Projects
-- =========================================================
create table projects (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) on delete cascade not null,
  title varchar(255) not null, 
  description text,
  html text,
  css text,
  js text,
  is_public boolean not null default true,
  image_path text,
  image_url text,
  is_forked boolean not null default false,
  forked_from bigint references projects(id) on delete set null,
  created_at timestamptz not null default now(),
  updated_at timestamptz  not null default now()
);

create trigger handle_updated_at before update on projects
  for each row execute procedure moddatetime(updated_at);


-- =========================================================
-- Followers (composite PK is enough)
-- =========================================================
create table followers (
  follower_id uuid references auth.users(id) on delete cascade not null,
  following_id uuid references auth.users(id) on delete cascade not null,
  created_at timestamptz not null default now(),
  primary key (follower_id, following_id)
);


-- =========================================================
-- Likes (composite PK is enough)
-- =========================================================
create table likes (
  user_id uuid references auth.users(id) on delete cascade not null,
  project_id bigint references projects(id) on delete cascade not null,
  created_at timestamptz not null default now(),
  primary key (user_id, project_id)
);


-- =========================================================
-- Bookmarks (composite PK is enough)
-- =========================================================
create table bookmarks (
  user_id uuid references auth.users(id) on delete cascade not null,
  project_id bigint references projects(id) on delete cascade not null,
  created_at timestamptz not null default now(),
  primary key (user_id, project_id)
);

-- =========================================================
-- Comments
-- =========================================================
create table comments (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) on delete cascade not null,
  project_id bigint references projects(id) on delete cascade not null,
  content text not null,
  created_at timestamptz not null default now(),
  updated_at timestamptz  not null default now()
);

create trigger handle_updated_at before update on comments
  for each row execute procedure moddatetime(updated_at);

-- =========================================================
-- Notifications
-- =========================================================
create type notification_type as enum ('like', 'comment', 'follow', 'fork');

create table notifications (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) on delete cascade not null, -- recipient
  type notification_type not null,
  actor_id uuid references auth.users(id) on delete cascade not null, -- who triggered it
  project_id bigint references projects(id) on delete cascade,
  is_read boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz  not null default now()
);

create trigger handle_updated_at before update on notifications
  for each row execute procedure moddatetime(updated_at);


-- Append the following into user metadata handled by supabase auth for easy profiles feature

-- display name
-- avatar_url
-- bio (text)
-- website_url
-- twitter_url
-- github_url
-- linkedin_url

-- =========================================================
-- Thumbnails - supabase storage
-- =========================================================
insert into storage.buckets  (id, name, public)values  ('thumbnails', 'thumbnails', true);

CREATE POLICY "Authenticated users can upload files"
ON storage.objects
FOR INSERT
TO authenticated
WITH CHECK (
  bucket_id = 'thumbnails');

CREATE POLICY "Users can view own files"
ON storage.objects
FOR SELECT
TO authenticated
USING (
  bucket_id = 'thumbnails');

CREATE POLICY "Users can delete own files"
ON storage.objects
FOR DELETE
TO authenticated
USING (
  bucket_id = 'thumbnails'
  AND owner = auth.uid()
);